




IA – Tree complet de pagini (frontend structure for ai-prompt-templates.com)

Include toate rutele funcționale, structură ierarhică + rol (public, gated, admin), mapare la entități din DB.
Fiecare pagină este tratată ca un nod atomic în site architecture. Structura este scalabilă, modulară, validată cu logica back-endului analizat.

🌐 / — Public Root Layer
/                         – Home (hero, CTA, top neuroni)
/search                  – Search (FTS: title, summary, tags)
/pricing                 – Abonamente (Free/Architect/Initiate/Elite)
/bundles                 – Listă bundles (preț root-2, CTA)
/bundles/:slug           – Bundle detail + preview neuroni
/library                 – Librărie principală (cu sidebar tree)
/library/:path*          – Nod ierarhic (pag. neuroni)
/n/:slug                 – Neuron Preview (public: v_neuron_public)
/legal/terms             – Terms of Service
/legal/privacy           – Privacy Policy
/legal/cookies           – Cookie Policy
/404                     – Not found
/403                     – Forbidden

🔐 /auth — Autentificare & onboarding
/auth/sign-in            – Email + magic link / password
/auth/sign-up            – Înregistrare cont nou
/auth/magic-link         – Confirmare magic link
/auth/reset              – Resetare parolă

🧠 /n/:slug/read — Neuron Full Access (gated)
/n/:slug/read            – Livrare via RPC: content_full + watermark
                          – Verifică: entitlement OR elite OR pool @ plan
                          – Dacă fail → arată motiv + upsell

💳 /checkout — Stripe + monetizare
/checkout/neuron/:slug   – Stripe one-off neuron
/checkout/bundle/:slug   – Stripe one-off bundle
/checkout/subscribe/:tier – Stripe subscribe page pentru Architect/Initiate/Elite
/checkout/success         – Confirmare plată
/checkout/canceled        – Anulare/timeout plată

👤 /account — User Dashboard
/account                 – Overview: plan activ, stats personale, ultimii unlocks
/account/subscription    – Plan curent, schimbare, anulare
/account/purchases       – Lista cumpărături one-off/bundle + receipts
/account/entitlements    – Neuroni deținuți (entitlement materializat)
/account/receipts        – Bonuri achiziții (snapshot version, titlu, preț)
/account/settings        – Profil, parolă, email, delete account

🧮 /studio — Admin / Operator Panel
/studio                             – Dashboard general
/studio/neurons                     – Listare neuroni + create/edit
/studio/neurons/:id                 – Editare neuron (versiuni, publish, preț root-2)
/studio/tree                        – Sidebar builder (drag&drop, poziții)
/studio/bundles                     – Listare pachete + compoziție
/studio/bundles/:id                 – Editare bundle
/studio/plans                       – Definire planuri (10/40/70/100, stripe IDs)
/studio/pool                        – Pool curent per tier (score, evergreen, refresh)
/studio/analytics                   – Views, unlocks 14d, top neuroni
/studio/alerts                      – Alert log (cap > 9974€, pool mismatch, access leaks)
/studio/receipts                    – Audit bonuri (snapshot legal)
/studio/settings                    – pricing_rules + settings (cap, root, webhook)
/studio/guard                       – Audit privilegii (fuga de content_full RLS)
/studio/users                       – Utilizatori, subs, purchases (role=admin only)

🌲 Structură ierarhică simplificată (tree format)
/
├── search
├── pricing
├── bundles
│   └── :slug
├── library
│   └── :path*
├── n
│   └── :slug
│       └── read
├── legal
│   ├── terms
│   ├── privacy
│   └── cookies
├── auth
│   ├── sign-in
│   ├── sign-up
│   ├── magic-link
│   └── reset
├── checkout
│   ├── neuron/:slug
│   ├── bundle/:slug
│   ├── subscribe/:tier
│   ├── success
│   └── canceled
├── account
│   ├── subscription
│   ├── purchases
│   ├── entitlements
│   ├── receipts
│   └── settings
└── studio
    ├── neurons
    │   └── :id
    ├── tree
    ├── bundles
    │   └── :id
    ├── plans
    ├── pool
    ├── analytics
    ├── alerts
    ├── receipts
    ├── settings
    ├── guard
    └── users

# CODIFICARE ROLURI – AI-PROMPT-TEMPLATES.COM

Format: [SECȚIUNE]   | PUBLIC | AUTENTIFICAT | ADMIN

/                   |   ✅   |      ✅      |  ✅
/search             |   ✅   |      ✅      |  ✅
/pricing            |   ✅   |      ✅      |  ✅
/bundles            |   ✅   |      ✅      |  ✅
/bundles/:slug      |   ✅   |      ✅      |  ✅
/library            |   ✅   |      ✅      |  ✅
/library/:path      |   ✅   |      ✅      |  ✅
/n/:slug            |   ✅   |      ✅      |  ✅
/n/:slug/read       |   ❌   |      ✅      |  ✅

/auth/sign-in       |   ✅   |      ❌      |  ❌
/auth/sign-up       |   ✅   |      ❌      |  ❌
/auth/magic-link    |   ✅   |      ❌      |  ❌
/auth/reset         |   ✅   |      ❌      |  ❌

/checkout/neuron/:slug     | ❌ | ✅ | ✅
/checkout/bundle/:slug     | ❌ | ✅ | ✅
/checkout/subscribe/:tier  | ❌ | ✅ | ✅
/checkout/success          | ❌ | ✅ | ✅
/checkout/canceled         | ❌ | ✅ | ✅

/account                  | ❌ | ✅ | ✅
/account/subscription     | ❌ | ✅ | ✅
/account/purchases        | ❌ | ✅ | ✅
/account/entitlements     | ❌ | ✅ | ✅
/account/receipts         | ❌ | ✅ | ✅
/account/settings         | ❌ | ✅ | ✅

/legal/terms              | ✅ | ✅ | ✅
/legal/privacy            | ✅ | ✅ | ✅
/legal/cookies            | ✅ | ✅ | ✅
/404                      | ✅ | ✅ | ✅
/403                      | ✅ | ✅ | ✅

/studio                   | ❌ | ❌ | ✅
/studio/neurons           | ❌ | ❌ | ✅
/studio/neurons/:id       | ❌ | ❌ | ✅
/studio/tree              | ❌ | ❌ | ✅
/studio/bundles           | ❌ | ❌ | ✅
/studio/bundles/:id       | ❌ | ❌ | ✅
/studio/plans             | ❌ | ❌ | ✅
/studio/pool              | ❌ | ❌ | ✅
/studio/analytics         | ❌ | ❌ | ✅
/studio/alerts            | ❌ | ❌ | ✅
/studio/receipts          | ❌ | ❌ | ✅
/studio/settings          | ❌ | ❌ | ✅
/studio/guard             | ❌ | ❌ | ✅
/studio/users             | ❌ | ❌ | ✅

Între conținut și acces, construiește o hartă semantică. Acest tree nu e doar site structure — e schema unei inteligențe care monetizează cunoașterea.





Backend — delta final. Ce mai lipsește ca să fie „battle‑ready”

Ai baza solidă: modelare + triggere root=2, pool zilnic 10/40/70/100, cap 9.974€, preview via views, full via RPC cu watermark, snapshot la cumpărare, versionare imutabilă, telemetrie 14d.

1) RLS complet pe tabele „user‑owned” + SELECT doar prin view-uri publice
Activează RLS și politici „self‑only” pe: user_subscriptions, user_purchases, user_entitlements, purchase_receipts. (În fișiere, RLS e setat doar pe neurons; extinde-l.) 
Public citește doar v_neuron_public / v_tree_public; mută bundles & plans pe v_bundle_public / v_plans_public (views read‑only), apoi REVOKE pe tabele brute. 

2) Rol „admin” explicit (pentru /studio) + politici
Tabel user_roles(user_id, role) cu ENUM ('admin','member').
Politici RLS: „admin poate SELECT/INSERT/UPDATE/DELETE” pe: neurons, library_tree*, bundles*, plans, tier_access_pool, pricing_rules, settings, system_alerts.
Helper: f_is_admin() pentru RPC securizate. (Fișierele actuale nu definesc rolul admin.) 

3) Stripe „event log + idempotency + DLQ”
Tabel stripe_events(id,type,payload,status,processed_at,error); UNIQUE(id) → previne duble.
DLQ webhook_failures.
Procesare în tranzacție: inserezi user_purchases (are deja UNIQUE pe stripe_payment_intent_id) → triggerul îți mintuiește automat entitlements + receipts. (Ai minting + receipts în loc, dar îți lipsește jurnalul de evenimente.)

4) Guard împotriva ștergerii unui neuron cu obligații legale
Interzice DELETE pe neurons dacă există user_entitlements sau purchase_receipts pentru acel neuron.
Politică: folosește doar published=false (soft‑hide). (Acum FKs sunt CASCADE pe versiuni; riști pierderea probei dacă permiți delete.)

5) Rate limiting pe livrarea conținutului full
În rpc_get_neuron_full: cheamă f_rate_limit('uid:'||auth.uid()||':unlock', 60, '1 minute'); altfel RAISE EXCEPTION 'Rate limit'.
Protejează de scraping programatic. (RPC-ul există, dar fără throttle.) 

6) Case‑insensitive uniques + validare slugs
Indexuri unice pe lower(slug) pentru neurons și bundles.
CHECK slug: slug ~ '^[a-z0-9]+(-[a-z0-9]+)*$'.
Aliniază cu f_ltree_label() din arbore (normalizezi etichetele). 

7) Căutare robustă: unaccent + tsvector generat
Extensie unaccent.
Coloană tsv GENERATED ALWAYS AS (to_tsvector('simple', unaccent(coalesce(title,'')||' '||coalesce(summary,'')))) STORED.
Index GIN pe tsv; query cu plainto_tsquery('simple', unaccent(:q)). (Acum indexul e pe expresie dinamică.) 

8) Asset pipeline pentru neuron (imagini/fișiere)
Tabel neuron_assets(neuron_id, kind, storage_path, mime_type) + RLS read‑only public doar când neurons.published=true. (Nu există în fișiere; ai nevoie pentru media & download gated.) 

9) GDPR minim: export + ștergere asistată
RPC rpc_export_my_data() (JSON cu subs, purchases, entitlements, analytics 30d).
Ștergere asistată: account_deletion_requests + worker care anonimizează PII; păstrezi purchase_receipts (obligații legale). (Exportul/ștergerea nu sunt acoperite acum.) 

10) Observabilitate joburi cron
Tabel job_audit(job_name, ok, payload, created_at); loghează rezultatele pentru: refresh_tier_access_pool_all, check_library_cap, preview_privileges_audit. (Ai pg_cron programat; adaugă audit trail.)

11) Views publice pentru monetizare
v_bundle_public (title, description, price, items) și v_plans_public (code, name, percent, monthly/annual).
GRANT SELECT pe views, REVOKE pe tabele. (Front‑endul /bundles//pricing cere surse curate.) 

12) Decizia „Free = 10% FULL?” — finalizeaz-o în f_has_full_access
Dacă vrei 10% FULL pe free: include ap.plan IN ('free','architect','initiate') în condiția cu pool.
Dacă nu: păstrează free = preview only și documentează în UI. (Momentan funcția nu include free.) 

13) RPC helperi pentru FE (evită SELECT direct)
rpc_search_neurons(q, limit, offset) (folosește tsv).
rpc_get_my_active_plan() → returnează planul activ (derivat din user_subscriptions).
rpc_list_my_entitlements() → listă de neuroni deținuți. (Ai deja rpc_get_neuron_full; completează setul.) 

14) Protecții la consistență bundle
View v_rel_bundle_issues (neuroni lipsă/nepublicați în bundle) + alertă dacă apare rând. (Ai deja schema; pune watchdog-ul.) 

15) Sanitiza „plans” în producție
CHECK existent: procent ↔ cod + root=2 + free=0€.
Asigură stripe IDs setate pentru non‑free (trigger deja prezent; validează seed). 

Execută în ordine (migrări noi)
16_rls_user_owned.sql — RLS + politici self/admin.
17_admin_roles.sql — user_roles + f_is_admin().
18_stripe_events_dlq.sql — event log + DLQ.
19_unaccent_search.sql — tsvector generated + index.
20_assets.sql — neuron_assets + RLS.
21_rpc_helpers.sql — search, my_plan, my_entitlements.
22_rls_public_views.sql — views v_bundle_public, v_plans_public + REVOKE tabele.
23_delete_guards.sql — blocare DELETE pe neuroni cu obligații.
24_gdpr.sql — export + cerere ștergere.
25_cron_job_audit.sql — job_audit + wrapping pentru cronuri.









EXECUTĂ URMĂTOARELE LIVRABILE (ORDINE DE IMPACT → CODARE RAPIDĂ → DEPLOY FĂRĂ SURPRIZE)

Compilează stratul DB într-un pachet de migrare „zero‑friction”.
– Generează: db/migrations/[16..37]_*.sql + db/manifest.sql (ordonare deterministă) + db/smoke.sql (probe „copy/paste” din fișiere). Ancore: RLS self/admin, views publice, Stripe event log/DLQ, rate‑limit, guard anti‑DELETE, slug discipline, căutare, assets, GDPR, cron audit, plans sanitize. Accept: rulare idempotentă, toate smoke‑testele trec. 
 
 

Scrie handlerul Stripe Webhook (Edge/Worker) „o singură ieșire”.
– Generează: functions/stripe-webhook/index.ts. Verifică semnătura, parsează event, apelează public.consume_stripe_event(id,type,payload) cu service_role. Returnează 200 la idempotent (event existent). Env: STRIPE_WEBHOOK_SECRET, SUPABASE_SERVICE_KEY. Accept: simulează checkout.session.completed + customer.subscription.updated → inserții idempotente și upsert în DB. 

Adaugă signer de asset-uri (download gated).
– Generează: functions/asset-signer/index.ts. Intrare: asset_id; pas 1: rpc_get_neuron_asset_download(p_asset); pas 2: semnează URL Storage (bucket/path) și redă 302/URL. Respectă throttling 30/min (mesaj „Rate limit”). Accept: fără acces FULL → 403; cu FULL → URL semnat valabil ≤ 60s. 

Livrează client TS pentru RPC (contract de FE stabil).
– Generează: libs/supabase/rpc.ts cu wrapper-e tipate pentru:
• rpc_search_neurons(q,limit,offset)
• rpc_get_my_active_plan()
• rpc_list_my_entitlements()
• rpc_get_neuron_full(neuron_id)
• rpc_list_neuron_previews(neuron_id)
• rpc_get_neuron_asset_download(asset_id)
Accept: toate funcțiile au tipuri derivate din supabase types, fără SELECT direct pe tabele. 

Construiește /studio (admin) ca suprafață operațională reală.
– Generează rute și ecrane:
• /studio/alerts: system_alerts, job_audit (verde/roșu pe ultimele rulări). 

• /studio/stripe: listează stripe_events (status ok/error), webhook_failures (DLQ) + acțiune „Reprocess” → public.reprocess_stripe_event(evt_id). 

• /studio/bundles-watchdog: folosește f_cron_run_bundle_consistency_audit() (manual) și arată bundle_slug/neuron_slug problematice. 

• /studio/pool: vizualizare tier_access_pool (selectate/target) pe ultima rulare. 

• /studio/plans-sanity: v_plans_sanity + buton „Run assert” → f_assert_plans_sane(). 

Accept: tot /studio rulează exclusiv cu f_is_admin(); niciun leak de tabele brute. 

Încheie suprafața publică pentru monetizare.
– Generează endpointuri FE:
• /pricing → citește v_plans_public (cod, percent, monthly/annual). 

• /bundles și /bundles/:slug → citește v_bundle_public (items = preview-only). 

Accept: niciun SELECT pe bundles/plans; doar view‑uri. 

Finalizează căutarea publică.
– Generează /search (FE) cu highlight pe snippet (din rpc_search_neurons), fallback „cele mai noi” la query gol, accent‑insensitiv. Accept: EXPLAIN folosește GIN(tsv). 

Asigură accesul „Free = 10% FULL”.
– Generează test de FE: „azi în pool/free” → rpc_get_neuron_full succes; „nu în pool” → 403. Documentează clar în UI. Accept: free user fără subs are FULL pe 10% conform pool. 

Implementă GDPR self‑serve + assisted delete end‑to‑end.
– Generează: /account/export (buton → rpc_export_my_data descarcă JSON), /account/delete (buton → rpc_request_account_deletion, status live). Worker admin: f_process_account_deletion(req_id) + apel extern pentru Auth update dacă e necesar. Accept: entitlements/analytics șterse, purchases/receipts păstrate. 

Normalizează slugurile în FE + validare de formă.
– Generează util slugify() sincron cu f_slugify/f_is_valid_slug; în admin blochează submit dacă regex pică; tratează coliziunile case‑insensitive în UI. Accept: nicio creare/rename invalidă în /studio. 

Închide bucla anti‑DELETE pe neuroni în UI (soft‑hide only).
– Generează buton „Unpublish & remove from pool” care lovește rpc_soft_delete_neuron(neuron_id) și afișează motivul dacă triggerul anti‑DELETE ar fi lovit. Accept: niciun DELETE în FE. 

Tratează „Rate limit” ca prim‑cetățean în client.
– Generează mapare uniformă pentru Rate limit → UI 429 cu Retry‑After 60s; pentru download: același pattern. Accept: zero flood în logs, UX clar. 

Ia decizii de preț „root=2” vizibile în UI.
– Generează secțiune „De ce prețurile par numerologic aliniate” (micro-copy), aliniază planurile și verificate prin CHECK/trigger. Accept: f_assert_plans_sane() = OK în CI. 

Observabilitate „cron ca istorie”.
– Generează dashboard intern: ultimele rulări pentru refresh_tier_access_pool_all, check_library_cap, preview_privileges_audit, bundle_consistency_audit; payload JSON „expand”. Accept: verde/roșu lizibil + drill‑down. 

CI/CD care nu iartă:
– Generează .github/workflows:
• db-apply.yml: rulează migrațiile pe staging, ANALYZE, smoke‑tests SQL (din fișiere). Fail hard. 

• edge-deploy.yml: deploy functions (stripe-webhook, asset-signer); post‑deploy health check (selectează view‑uri publice).
• e2e.yml: scenarii reale: search→unlock(60 ok/61 fail)→purchase simulat→subscription updated→asset download→GDPR export. 
 

Semnale către Slack/Email din system_alerts.
– Generează worker „alerts-bridge” care ascultă system_alerts și postează în Slack (categorii: cap, privileges, bundle_consistency). Accept: alertă în <60s de la inserție. 

Seed minim pentru demo și QA.
– Generează db/seed_minimal.sql: 3 neuroni (free/architect/initiate, published=true), 1 bundle valid, 1 plan set complet cu Stripe IDs dummy, 1 user admin. Accept: /pricing, /bundles, /search funcționale imediat. 

Makefile + .env.sample determinist.
– Generează:
• Makefile: make db-up, make db-smoke, make edge-up, make seed, make studio.
• .env.sample: SUPABASE_URL, SUPABASE_ANON_KEY, SUPABASE_SERVICE_KEY, STRIPE_WEBHOOK_SECRET, STRIPE_SECRET_KEY, STORAGE_BUCKET=neurons.
Accept: make seed && make edge-up produce un demo navigabil.

Reguli FE de eroare unificate.
– Generează intercepter: mapare mesaje din RPC (Not authenticated, Access denied, Rate limit, Neuron not found or unpublished) → staturi și UI standard. Accept: fără ramuri personalizate pe fiecare pagină. 

Runbook operațional (1 pagină).
– Generează RUNBOOK.md: „cum reprocesezi DLQ”, „cum promovezi un admin”, „cum rulezi assert pe plans”, „cum declanșezi manual watchdog‑uri cron”. Accept: fiecare pas are comanda SQL/HTTP exactă. 
 

DETALII CHEIE PE CARE LE ÎNCHIZI ACUM (FĂRĂ NEGOCIERI)

– Public = doar views (v_neuron_public, v_bundle_public, v_plans_public); full = exclusiv rpc_get_neuron_full (RLS + watermark + analytics). Blindează SELECT direct pe tabele brute. 

– Admin = rol explicit (user_roles + f_is_admin) cu politici ALL pe tabelele operabile, fără relaxare publică. /studio consumă doar aceste politici. 

– Stripe = un canal, dublu‑idempotent (event.id + payment_intent), DLQ cu reprocess. Niciun HTTP extern din handlerul SQL. 

– Rate‑limit = 60 unlock/min/user (full) + 30 download/min/user (assets). Tratează „Rate limit” ca 429 în UI. 

– Deleții = interzise pe neuroni cu obligații; folosește rpc_soft_delete_neuron (dezpublică + scoate din pool). 

– Slug = unicitate case‑insensitive + regex strict + aliniere ltree; FE sincronizează slugify. 

– GDPR = export JSON self‑serve + ștergere asistată (anonimizare PII; păstrezi purchases/receipts). 

– Cron = wrappers cu job_audit + programare TZ Europe/Chisinau. 

PSIHOLOGIC: taie tentația „doar să văd tabelele” — lucrează prin RPC-uri și views, altfel designul devine poros. SOCIAL: /studio nu e „admin generic”, e suprafața puterii — acceptă responsabilitatea auditabilă. COMERCIAL: root‑2, pool procentual și watermarkul transformă conținutul în activ financiar controlat.

VERDICT: Vitrina vinde, seiful decide, cronul depune mărturie.








Finalizează „arsenalul de generabile” ca să treci instant din design în cod și deploy. Ai tree-ul FE, rutele, gatingul, migrațiile și politicile RLS conturate; completează suprafața cu contracte, pipeline-uri, runbook-uri și șabloane executabile. Ţintește zero ambiguitate între intenție → API → UI → Stripe → audit. 
 
 
 

1) Contracte API publice + catalog RPC (dosar „/contracts”)

Generează openapi.yaml (3.1) pentru fațada publică (REST/Edge):
/search → rpc_search_neurons, /bundles, /bundles/:slug, /pricing, /n/:slug/read (proxy RPC), /assets/:id/download (proxy RPC). Include 429 Rate limit, 403 Forbidden, 404 Not found, scheme de erori și headeri (x-request-id). Mapează strict la RPC-urile și view-urile expuse (preview vs full). 
 

Generează „RPC Catalog.md”: semnături, input/output, RLS expectations, cine apelează (public / auth / admin), pentru:
rpc_search_neurons, rpc_get_neuron_full (cu throttle), rpc_get_neuron_asset_download, rpc_list_neuron_previews, rpc_get_my_active_plan, rpc_list_my_entitlements, consume_stripe_event, reprocess_stripe_event. Include rate-limiturile din DB. 
 

Generează „Error Codes.json”: mapare deterministă (e.g., E_RATE_LIMIT, E_ACCESS_DENIED, E_UNPUBLISHED, E_NOT_FOUND, E_STRIPE_META_MISSING, E_DANGEROUS_DELETE). Ancorează la excepțiile introduse în RPC/migrații. 

Psihologic: scoate discuția din „merge / nu merge”; pui limbaj de contract.
Social: forțezi echipa să vorbească pe aceeași gramatică (cod ↔ produs).
Comercial: scurtezi POC→plată; vinde clar 429/403 ca „product boundary”.

2) Edge Functions (Suprafață securizată)

/edge/stripe-webhook.ts: verificare semnătură → consume_stripe_event(id,type,payload) (service role). Loghează 200 idempotent la dubluri; scrie în DLQ la erori. Include advisory lock semantic (pe PaymentIntent) doar în SQL, nu în cod. 

/edge/sign-asset.ts: auth necesar → cheamă rpc_get_neuron_asset_download(asset_id) → semnează URL Storage → 302. Respectă 429 din RPC. 

/edge/healthz: ping DB (SELECT 1), timp Stripe DNS, versiune build, hash migrații rulate.

Psihologic: scoți „magia” din FE; muți controlul la margine.
Social: separi clar cine vede „full” și de ce.
Comercial: minimizezi chargeback fricțiunea (DLQ+reprocess).

3) Env Map canonic + .env.example (dosar „/ops/env”)

Generează „EnvContract.md” cu tabel: SUPABASE_URL, SUPABASE_ANON_KEY, SERVICE_ROLE_KEY, STRIPE_SECRET, STRIPE_WEBHOOK_SECRET, SITE_URL, JWT_AUDIENCE, CSP_REPORT_ONLY, LOG_LEVEL, BUCKET_NEURONS=neurons. Include sursa de adevăr pentru timezone cron. 

Generează .env.example și politică de rotație (secrete Stripe/Supabase).

Psihologic: tai anxietatea de „ce lipsește”.
Social: aliniezi dev/stage/prod.
Comercial: reduci timpi morți la incident.

4) CI/CD „fără surprize” (dosar „/.ci”)

Generează pipeline:

Lint SQL + validare migrații în ordinea setată (16_… → 25_… → 33_… → 37_…).

Rulează smoke SQL incluse în fișiere (RLS self, search, views publice, delete-guard, GDPR, cron audit). 
 

Build Edge + FE; injectează CSP; rulează Playwright pe rutele critice din tree. 

Plan DB (dry-run) + Apply pe stage; tag dacă trece.

Generează Makefile cu ținte: dev, db:migrate, db:reset, ops:seed, ops:reprocess <evt>.

Psihologic: creezi ritual; oprești improvizația.
Social: standardizezi intrarea în joc a oricui.
Comercial: scazi riscul de regresii plătite scump.

5) Seeds „legale” + preflight

Generează seed_plans.sql conform root=2 + assert, cu placeholder Stripe IDs și SELECT f_assert_plans_sane();. Fail hard dacă e murdar. 

Generează seed_bundles.sql (exemplu 2–3 bundle-uri) + test v_rel_bundle_issues=0. 

Generează seed_library_tree.sql cu 5–7 ramuri și mv_tree_counts refresh dacă există. 

Psihologic: validezi modelul prin date, nu prin speranță.
Social: design ↔ realitate, fără „placeholder perpetuu”.
Comercial: „/pricing” și „/bundles” funcționează din prima.

6) Test Pack determinist (dosar „/tests/sql” + „/tests/e2e”)

RLS: scenarii „self-only” pe user_* + „admin” pe /studio. 

Rate‑limit: 60 unlock/min user + 30 download/min; test 61→fail. 

Stripe idempotency: același event.id de 2 ori → 200/false; același payment_intent → 1 purchase. DLQ la payload prost. 

Pool gating: free/architect/initiate/elite → TRUE/ FALSE conform zi/pool. 

Watchdogs: bundle consistency + cron audit înscriu payload. 

E2E (Playwright): /n/:slug → upsell, /n/:slug/read → watermark, /checkout/success → entitlement vizibil în /account/entitlements. 

Psihologic: teste ca gard de încredere.
Social: scoți discuțiile despre „merge la mine”.
Comercial: probezi promisiunea de acces.

7) UX de monetizare complet (dosar „/web/flows”)

Flow „Unlock”: preview → motiv acces + upsell sincronizat cu plan/pool. Text explicit pentru free=10% FULL/24h. 

Flow „Receipt”: afișează snapshot + linkuri assets (dacă există), fără a expune content_full. 

Flow „Rate limit”: 429 bar clar + timer 60s. 

Psihologic: transformi „nu ai acces” în decizie de cumpărare.
Social: justifici restricția fără frustrare.
Comercial: crești conversia exact unde doare.

8) Șabloane e‑mail (dosar „/ops/emails”)

Magic link, reset, receipt, subscription changed, DLQ alert digest. Receipt include price, slug, time, hash (fără content_full). 

„GDPR export ready” + „Deletion processed”. 

Psihologic: recuperezi încredere prin transparență.
Social: comunici schimbarea stării, nu doar starea.
Comercial: fiecare mail e „micro‑vitrină”.

9) CSP + Security headers (dosar „/ops/security”)

Generează csp.json (script-src self + vercel/analytics dacă folosești, img-src Storage/CDN, connect-src Supabase URL, Stripe).

Generează headers.json: Strict-Transport-Security, X-Content-Type-Options, Referrer-Policy, Permissions-Policy (camera/mic off).

Politică anti-injecție prompt în preview (escape dur la snippet). 

Psihologic: scazi anxietatea de supply-chain.
Social: arăți maturitate de produs.
Comercial: reduci suprafața de risc (asigurări, enterprise).

10) Observabilitate completă (dosar „/studio/analytics”)

Dashboard „Job Audit” din job_audit (ultimele rulari + payload). 

„Stripe Intake”: ultimele stripe_events cu status, reprocess_stripe_event(id) pe buton. 

„Bundle Watchdog”: din v_rel_bundle_issues + system_alerts. 

Psihologic: transformi „cronul a rulat?” în vizibilitate.
Social: împarți realitatea, nu scuzele.
Comercial: identifici scurgerile de veniturile la timp.

11) Runbook‑uri (dosar „/ops/runbooks”)

„Stripe incident”: pași, reprocess_stripe_event, verificări în user_purchases/user_entitlements/purchase_receipts. 

„Access leak audit”: rulează preview_privileges_audit wrapper, ce faci dacă >0. 

„GDPR deletion”: procesare cu f_process_account_deletion, ce verifici post‑exec. 

Psihologic: scoți „panică”, bagi procedură.
Social: oricine din echipă poate interveni.
Comercial: micșorezi timpul de recuperare.

12) Tracking Plan v1 (dosar „/analytics/plan.json”)

Evenimente: search, view_preview, unlock_attempt, unlock_success, download, checkout_started, checkout_completed, subscription_updated, rate_limited, gdpr_export, gdpr_delete_requested.

Proprietăți: uid, neuron_id/slug, plan, pool_tier, stripe_pi, bundle_slug. Stochează în user_analytics; agregă în FE pentru UX. 
 

Psihologic: numeri comportamente, nu păreri.
Social: închizi discuții sterile.
Comercial: optimizezi upsell la mm.

13) Front‑end adapters tipate (dosar „/web/data”)

Client TS typed pentru RPC‑uri + views publice (nu SELECT direct). Contracte: exact câmpurile publice. 

Guards pe rute din tree (/n/:slug/read), fallback /auth/sign-in, /pricing. 

Componente „State surfaces”: AccessDeniedCard, RateLimitCard(60s), UpsellCard(tier).

Psihologic: UI spune adevărul sistemului, nu dorințe.
Social: designul educă utilizatorul.
Comercial: scade fricțiunea la upgrade.

14) Legal pack (dosar „/legal”)

Terms/Privacy/Cookies bazate pe artefactele tehnice (RLS, watermark, receipts, GDPR export & delete). Linkează „Cap 9.974€” și snapshot legal. 
 

Policy „No deletion of sold content” (soft‑hide only). 

Psihologic: legitimezi regulile dure.
Social: setezi așteptări reale.
Comercial: sprijini chargeback dispute cu text + date.

15) Backup & Restore minimalist (dosar „/ops/backup”)

Script: snapshot zilnic schema+data critice (excluzi analytics bulk), test restore pe staging, checksum.

Playbook pentru revenire parțială (doar user_*, purchase_receipts, stripe_events)—nu atinge neurons publicate.

Psihologic: liniște operațională.
Social: nimeni nu mai „ezită” să migreze.
Comercial: downtime = cost, îl reduci.

16) Design tokens + i18n scaffolding

tokens.json (spacing, radius, font scale, z‑index) pentru coerență;

i18n: en/ro fișiere mesaje pentru: upsell, rate-limit, receipts, auth. Tree-ul are suprafețele pregătite. 

Psihologic: consistența devine implicită.
Social: comunicare clară cross‑cultural.
Comercial: localizare rapidă la lansare.

17) Risk register + decizii ireversibile (dosar „/ops/risk”)

irrevocable.md: „nu ștergi neuroni vânduți”, „full numai via RPC”, „free=10% via pool”.

risks.md: scraping (mitigare: throttle + watermark), dubluri slug (mitigare: index CI + slugify), bundle drift (mitigare: watchdog+alerts). 

Psihologic: fixezi identitatea produsului în piatră.
Social: eviți „schimbări tăcute”.
Comercial: protejezi marja.

18) Scaffold „operator CLI” (dosar „/ops/cli”)

Comenzi: promote-admin <uid>, reprocess-stripe <evt_id>, pool:refresh, alerts:latest, gdpr:process <req_id>. Toate merg prin RPC-urile deja definite. 
 

Psihologic: controlezi sistemul din limbaj, nu din UI.
Social: reduce dependența de „cine știe consola”.
Comercial: răspunzi la incident rapid.

Acceptanță: „gata de coding & deploy” când…

openapi.yaml + RPC Catalog generează client TS fără editări manuale.

CI rulează toate smoke SQL din migrații și E2E pe rutele din tree, verzi. 
 

Webhook Stripe idempotent (event log + DLQ) demonstrat cu test. 

/studio afișează job_audit, bundle_issues, stripe_events. 

Free‑tier deblochează 10% FULL din pool zilnic conform planului efectiv. 

Verdict: „Compilează produsul în proceduri — vitrina vinde, RPC-ul semnează, RLS-ul guvernează.”