#!/usr/bin/env node

require('dotenv').config({ path: '.env' });
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function validatePlansDirect() {
  console.log('üîç Validare directƒÉ PLANS-01...\n');

  try {
    // 1. VerificƒÉ planurile existente
    console.log('1Ô∏è‚É£ Verific planurile existente...');
    const { data: plans, error: plansError } = await supabase.from('plans').select('*');
    
    if (plansError) {
      console.log('‚ùå Eroare la accesarea planurilor:', plansError.message);
      return;
    }

    console.log(`üìã Planuri gƒÉsite: ${plans.length}\n`);

    // 2. ValideazƒÉ fiecare plan
    let totalIssues = 0;
    const issues = [];

    for (const plan of plans) {
      console.log(`üîç Validare ${plan.code.toUpperCase()}:`);
      
      // CalculeazƒÉ digital root
      const monthlyRoot = plan.monthly_price_cents > 0 ? 
        calculateDigitalRoot(plan.monthly_price_cents / 100) : 0;
      const annualRoot = plan.annual_price_cents > 0 ? 
        calculateDigitalRoot(plan.annual_price_cents / 100) : 0;
      
      console.log(`  Monthly: ${plan.monthly_price_cents/100}‚Ç¨ (root: ${monthlyRoot})`);
      console.log(`  Annual: ${plan.annual_price_cents/100}‚Ç¨ (root: ${annualRoot})`);
      
      // ValidƒÉri
      let planIssues = 0;
      
      // 1. VerificƒÉ percent_access
      const expectedPercent = getExpectedPercent(plan.code);
      if (plan.percent_access !== expectedPercent) {
        console.log(`  ‚ùå Percent: ${plan.percent_access}% (expected: ${expectedPercent}%)`);
        planIssues++;
        issues.push(`${plan.code}: percent_access mismatch`);
      } else {
        console.log(`  ‚úÖ Percent: ${plan.percent_access}%`);
      }
      
      // 2. VerificƒÉ pre»õurile free vs non-free
      if (plan.code === 'free') {
        if (plan.monthly_price_cents !== 0 || plan.annual_price_cents !== 0) {
          console.log(`  ‚ùå Free plan should have 0‚Ç¨ prices`);
          planIssues++;
          issues.push(`${plan.code}: free plan has non-zero prices`);
        } else {
          console.log(`  ‚úÖ Free plan has 0‚Ç¨ prices`);
        }
        
        if (plan.stripe_price_id_month !== null || plan.stripe_price_id_year !== null) {
          console.log(`  ‚ùå Free plan should not have Stripe IDs`);
          planIssues++;
          issues.push(`${plan.code}: free plan has Stripe IDs`);
        } else {
          console.log(`  ‚úÖ Free plan has no Stripe IDs`);
        }
      } else {
        // Non-free plans
        if (plan.monthly_price_cents <= 0 || plan.annual_price_cents <= 0) {
          console.log(`  ‚ùå Non-free plan should have >0‚Ç¨ prices`);
          planIssues++;
          issues.push(`${plan.code}: non-free plan has zero/negative prices`);
        } else {
          console.log(`  ‚úÖ Non-free plan has >0‚Ç¨ prices`);
        }
        
        // 3. VerificƒÉ digital root = 2
        if (monthlyRoot !== 2) {
          console.log(`  ‚ùå Monthly price root ${monthlyRoot} ‚â† 2`);
          planIssues++;
          issues.push(`${plan.code}: monthly price root ${monthlyRoot} ‚â† 2`);
        } else {
          console.log(`  ‚úÖ Monthly price root = 2`);
        }
        
        if (annualRoot !== 2) {
          console.log(`  ‚ùå Annual price root ${annualRoot} ‚â† 2`);
          planIssues++;
          issues.push(`${plan.code}: annual price root ${annualRoot} ‚â† 2`);
        } else {
          console.log(`  ‚úÖ Annual price root = 2`);
        }
        
        // 4. VerificƒÉ Stripe IDs
        if (!plan.stripe_price_id_month || !plan.stripe_price_id_year) {
          console.log(`  ‚ùå Non-free plan missing Stripe IDs`);
          planIssues++;
          issues.push(`${plan.code}: missing Stripe IDs`);
        } else {
          console.log(`  ‚úÖ Non-free plan has Stripe IDs`);
        }
      }
      
      totalIssues += planIssues;
      console.log(`  üìä Probleme gƒÉsite: ${planIssues}\n`);
    }

    // 3. Raport final
    console.log('üìä RAPORT FINAL PLANS-01:');
    console.log('================================');
    
    if (totalIssues === 0) {
      console.log('‚úÖ TOATE VALIDƒÇRILE AU TRECUT!');
      console.log('‚úÖ Pre»õurile non-free au digital root = 2');
      console.log('‚úÖ Planurile non-free au Stripe price IDs');
      console.log('‚úÖ Planurile free au pre»õuri 0‚Ç¨ »ôi nu au Stripe IDs');
      console.log('‚úÖ Percentajele de acces sunt corecte');
    } else {
      console.log(`‚ùå ${totalIssues} PROBLEME GƒÇSITE:`);
      issues.forEach((issue, index) => {
        console.log(`  ${index + 1}. ${issue}`);
      });
      
      console.log('\nüîß ACTIUNI NECESARE:');
      console.log('  1. CorecteazƒÉ pre»õurile pentru a avea digital root = 2');
      console.log('  2. AsigurƒÉ-te cƒÉ planurile non-free au Stripe IDs valide');
      console.log('  3. VerificƒÉ cƒÉ planurile free au pre»õuri 0‚Ç¨');
    }

    // 4. RecomandƒÉri pentru corectare
    console.log('\nüí° RECOMANDƒÇRI PENTRU CORECTARE:');
    console.log('  - FREE: 0‚Ç¨ (root: 0) - corect');
    console.log('  - ARCHITECT: 29‚Ç¨ (root: 2) / 299‚Ç¨ (root: 2)');
    console.log('  - INITIATE: 74‚Ç¨ (root: 2) / 749‚Ç¨ (root: 2)');
    console.log('  - ELITE: 299‚Ç¨ (root: 2) / 2999‚Ç¨ (root: 2)');
    
    // CalculeazƒÉ pre»õurile corecte cu root = 2
    console.log('\nüßÆ CALCUL PRE»öURI CU ROOT = 2:');
    const correctPrices = calculateCorrectPrices();
    correctPrices.forEach(price => {
      console.log(`  ${price.eur}‚Ç¨ ‚Üí ${price.cents} cen»õi ‚Üí root: ${price.root}`);
    });

  } catch (error) {
    console.error('‚ùå Eroare la validarea planurilor:', error);
  }
}

function calculateDigitalRoot(num) {
  if (num <= 0) return 0;
  let n = Math.floor(num);
  while (n > 9) {
    n = n.toString().split('').reduce((a, b) => parseInt(a) + parseInt(b), 0);
  }
  return n;
}

function getExpectedPercent(code) {
  const percentMap = {
    'free': 10,
    'architect': 40,
    'initiate': 70,
    'elite': 100
  };
  return percentMap[code] || 0;
}

function calculateCorrectPrices() {
  const prices = [];
  const targetRoot = 2;
  
  // GenereazƒÉ pre»õuri cu root = 2
  for (let eur = 20; eur <= 3000; eur++) {
    const root = calculateDigitalRoot(eur);
    if (root === targetRoot) {
      prices.push({
        eur,
        cents: eur * 100,
        root
      });
    }
  }
  
  // ReturneazƒÉ doar c√¢teva exemple relevante
  return prices.filter(p => [29, 74, 299, 749, 2999].includes(p.eur));
}

// RuleazƒÉ validarea
validatePlansDirect().catch(console.error);
